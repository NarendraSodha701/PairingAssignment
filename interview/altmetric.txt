class Derived
{
protected final void getDetails()
{
System.out.println("Derived class");
}
}

public class Test extends Derived
{
protected final void getDetails()
{
System.out.println("Test class");
}
public static void main(String[] args)
{
Derived obj = new Derived();
obj.getDetails();
}
}
a) Derived class
b) Test class
c) Runtime error
d) Compilation error

class Test {
protected int x, y;
}

public class Main {
public static void main(String args[]) {
Test t = new Test();
System.out.println(t.x + " " + t.y);
}
}
a) 0 0
b) 1 1
c) Runtime error
d) Compilation error



class Main {
public static void main(String args[]) {
try {
throw 10;
}
catch(int e) {
System.out.println("Got the Exception " + e);
}
}
}




public class Test
{
public static void main(String[] args) throws InterruptedException
{
String str = new String("ABC");
// making str eligible for gc
str = null;
// calling garbage collector
System.gc();
// waiting for gc to complete
Thread.sleep(1000);
System.out.println("end of main");
}

 @Override
protected void finalize()
{
System.out.println("finalize method called");
}
}

1. end of main
2. finalize method called
3. end of main
finalize method called


list<Char> clst= new ArrayList<>(Arrays.aslist('a','e','i','u','o'));
 String v = 

clst.stream().filter(fstchar->clst.contains(char) fst char).


@FunctionalInterface
public interface Function2<T, U, V> {
public V apply(T t, U u);

 default void count() {
// increment counter
}
default void value() {
// print value
}
}

@ApParma ( HttpHeader header)


  fun(Req,header);





list.stream().filter(emp -> (emp.getAge()>30  && emp.getSalary()>30000).colllect(Collector.aslist())



checkPain(){

String s;
int forward ;
int backward;
if(forward==backward){
return true; 
}





list 1   - a,bc, 

list 2  b  a,bc,c 


list 1  .stream().filter(list2::Contains).collect(Colllector.asList());



linkedlist 




